/* 
√âtats de notre Tamastudi possibles :
- ü•ö : partie non lanc√©e
- üê£ : naissance pendant tant qu'il n'a pas fait son 1er caca
Ensuite il devient un "grand" avec une humeur variable
- üò¢ : triste 0/5
- üôÅ : pas content 1/5
- üôÇ : normal 2/5
- üòÑ : content 3/5
- ü§ó : heureux 4/5
- ü•∞ : tr√®s heureux 5/5
- üëª : mort 0/5
Ses envies :
- üòã : faim, al√©atoire minimum 30 sec et max 3 minutes
- ü•± : jouer, al√©atoire minimum 30 sec et max 3 minutes
- üí© : caca, al√©atoire minimum 30 sec et max 1.30 minutes uniquement apr√®s avoir mang√©
*/
const myTama = {
  name: "",
  alive: false,
  fed: 0,
  playfull: 0,
  cleaned: 0,
  lifeDuration: 0,
  desire: "",
};
/*
//*PHASE 0: activez le tamaStudi
1) cliquez sur le bouton du milieu
2)Ajouter un compteur qui attend d'avoir une valeur max de 5 clics 
3)alors on fait naitre notre Tama
*/
const start = () => {
  //1) cliquez sur le bouton du milieu
  const buttonCenter = document.querySelector(
    '.js-button[data-direction="center"]'
  );
  let count = 0;
  buttonCenter.addEventListener("click", () => {
    //2)Ajouter un compteur qui attend d'avoir une valeur max de 5 clics
    count++;
    if (count === 5) {
      //3)alors on fait naitre notre Tama
      birth();
    }
  });
};
/*PHASE 1 :la naissance de mon tama
1)demander le nom de mon personnage
2)fait √©clore mon oeuf pour passer au poussin
3)affiche mes vitals
4)affiche le nom de mon tama dans les vitals
5)mettre les scores des vitals √† 5
6)afficher les actions
*/

const birth = () => {
  //1)demander le nom de mon personnage
  myTama.name = prompt("Quel nom √† votre TamaStudi?");
  //2)fait √©clore mon oeuf pour passer au poussin
  showInScreen("üê£");
  //3)affiche mes vitals
  const vitals = document.querySelector(".js-vitals");
  vitals.classList.remove("hidden");
  //4) affiche le nom de mon tama dans les vitals
  const nameDisplay = document.querySelector(".js-tamaName");
  nameDisplay.textContent = myTama.name;
  //5)mettre les scores des vitals √† 5
  const defaultScore = 5;
  myTama.fed = defaultScore;
  myTama.playfull = defaultScore;
  myTama.cleaned = defaultScore;
  updateVitals();
  //6)afficher les actions
  const actions = document.querySelector(".js-actions");
  actions.classList.remove("hidden");
  //7)appel de la fonction pour le faire grandir
  evolve();
  //8)Calcul de la dur√©e de vie
  myTama.alive = true;
  calcLifeDuration();
};

/* PHASE 2 : l'√©volution de mon Tama
1)attendre que le tama est une premiere envie 
2)il devient grand
*/
const evolve = () => {
  //1)attendre que le tama ait une premiere envie
  const functionToExecute = () => {
    mood();
    cycleOfAdultLife();
  };
  wantsTo(functionToExecute);
};

/*Les envies
Fonction pour gerer 
- üòã : faim, al√©atoire minimum 30 sec et max 1 minutes
- ü•± : jouer, al√©atoire minimum 30 sec et max 1 minutes
- üí© : caca, al√©atoire minimum 30 sec et max 1.30 minutes uniquement apr√®s avoir mang√©

1)creer une fonction qu'on va pourvoir appeler plus tard dans notre code
2)stocker les envies de mon tama dans une variable
3)avec un setTimout choisir une envie al√©atoire
4)ola dur√©e du setTimout est dynamique et est comprise enetre une valeur max et une valeur min
5)afficher l'envie du tama sur notre √©cran
6)L'envie de faire caca ne peut etre faite que s'il a d√©ja mang√©
*/
const wantsTo = (callback) => {
  const needs = ["üòã", "ü•±", "üí©"];
  //min = 1sec et max =3sec
  const minDuration = 1000;
  const maxDuration = 3000;
  const duration = getRandomInt({
    min: minDuration,
    max: maxDuration,
  });
  setTimeout(() => {
    const randomIndexNeeds = getRandomInt({
      max: needs.length,
    });
    const desire = needs[randomIndexNeeds];
    showInScreen(desire, true);
    if (callback) {
      callback(desire);
    } else {
      showInScreen(desire, true);
    }
  }, duration);
};

/*HUMEUR GENERAL:
Une fonction qui calcul la moyenne des trois indicateurs faim, ennui, propret√© de notre Tama
-elle affiche cette moyenne dans les vitals
*/
const mood = () => {
  //parte 1 affichage num√©rique
  const sum = myTama.fed + myTama.playfull + myTama.cleaned;
  const average = sum / 3;
  const rounded = Math.round(average);
  const displayMood = document.querySelector(".js-mood");
  displayMood.textContent = rounded;
  //partie 2 affichage visuel
  const listOfEmojis = ["üò¢", "üôÅ", "üôÇ", "üòÑ", "ü§ó", "ü•∞"];
  showInScreen(listOfEmojis[rounded]);
  //partie 3
  if (rounded === 0) {
    showInScreen("üëª");
    myTama.alive = false;
  }
};
/*DUREE DE VIE:
Une fonction qui toutes les minutes,et √† jours la dur√©e de vie du Tama
*/
const calcLifeDuration = () => {
  const duration = 60_000; //60sec
  const displayLifeDuration = document.querySelector(".js-life-duration");
  setInterval(() => {
    myTama.lifeDuration++;
    displayLifeDuration.textContent = myTama.lifeDuration;
  }, duration);
};

/*GESTION DE VIE ADULTE
- Notre Tama √† une humeur g√©n√©rale
- cette humeur et la moyenne de 3 indicateurs
oui  => mood()
- Ces indicateurs √©volue avec le temps
=>A FAIRE
- de temps en temps notre Tama √† une "envie"
=> oui wantsto()
- Si on ne r√©pond pas dans les temps
- L'indicateur associ√© diminue
- Si on r√©pond dans les temps
- L'indicateur augmente
=> A FAIRE
- Et ca continue jusqu'a ce que notre Tama meurt
=> A FAIRE
*/

const cycleOfAdultLife = () => {
  if (myTama.alive) {
    //1)Ces indicateurs √©volue avec le temps
    //de temps en temps notre Tama √† une "envie"
    const functionToExecute = (desire) => {
      showInScreen(desire, true);
      myTama.desire = desire;
      waitForAction();
    };
    wantsTo(functionToExecute);
  } else {
    showInScreen("üëª");
  }
};

let timeoutWaitForAction;
const waitForAction = () => {
  timeoutWaitForAction = setTimeout(() => {
    manageIndicators(myTama.desire, false);
    showInScreen("", true);
    cycleOfAdultLife();
  }, 3000);
};

const buttonsAction = document.querySelectorAll(".js-button-action");
buttonsAction.forEach((button) => {
  button.addEventListener("click", () => {
    const associateDesire = button.getAttribute("data-desire");
    const tamaDesireString = translateEmoji(myTama.desire);
    console.log("click", associateDesire, myTama.desire, desire);
    const isGoodButton = tamaDesireString === associateDesire;
    if (isGoodButton) {
      clearTimeout(timeoutWaitForAction);
      manageIndicators(myTama.desire, isGoodButton);
      cycleOfAdultLife();
    }
  });
});

const translateEmoji = (emoji) => {
  let word = "";
  if (emoji === "üòã") word = "eat";
  else if (emoji === "ü•±") word = "play";
  else if (emoji === "üí©") word = "clean";
  return word;
};

const manageIndicators = (desire, hasSucceeded) => {
  const numberToAdd = hasSucceeded ? +1 : -1;
  const calculName = hasSucceeded ? "addition" : "substraction";
  if (desire === "üòã" && verifyIndicatorBeforeCalcul(myTama.fed, calculName)) {
    myTama.fed += numberToAdd;
  } else if (
    desire === "ü•±" &&
    verifyIndicatorBeforeCalcul(myTama.playfull, calculName)
  ) {
    myTama.playfull += numberToAdd;
  } else if (
    desire === "üí©" &&
    verifyIndicatorBeforeCalcul(myTama.cleaned, calculName)
  ) {
    myTama.cleaned += numberToAdd;
  }
  updateVitals();
  mood();
  if (hasSucceeded) {
    showInScreen("", true);
  }
};

const verifyIndicatorBeforeCalcul = (value, calcul) => {
  if (calcul === "addition") {
    return value < 5;
  } else {
    return value > 0;
  }
  //V√©rifier si l'indicateur peut √™tre incr√©menter ou d√©cr√©menter
  return; //vrai ou faux
};

/*Fonction qui permer d'afficher dans les Vitals la valeurs des indicateurs */
const updateVitals = () => {
  const displayIndicatorEat = document.querySelector(".js-score--eat");
  displayIndicatorEat.textContent = myTama.fed;
  const displayIndicatorPlay = document.querySelector(".js-score--play");
  displayIndicatorPlay.textContent = myTama.playfull;
  const displayIndicatorClean = document.querySelector(".js-score--clean");
  displayIndicatorClean.textContent = myTama.cleaned;
};

/*Fonction qui retourne un nombre al√©atoire avec une min et max*/
const getRandomInt = (props) => {
  const max = props.max;
  //oulala la belle ternaire
  const min = props.min ? props.min : 0;
  return Math.floor(Math.random() * (max - min) + min);
};

/*Fonction qui g√®re l'affichage des emoticone dans l'√©cran du TAMA*/
const character = document.querySelector(".js-character");
const desire = document.querySelector(".js-desire");
const showInScreen = (display, isDesire) => {
  if (isDesire) {
    desire.textContent = display;
  } else {
    character.textContent = display;
  }
};

//lance la fonction de d√©but de mon TAMA
start();
